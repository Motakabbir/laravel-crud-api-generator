<?php
namespace App\Http\Controllers\Api;

use Illuminate\Http\Request;
use App\Constants\AuthConstants;
use App\Constants\Constants;
use App\Http\Controllers\Controller;
use App\Http\Requests\{{modelName}}\Store{{modelName}}Request;
use App\Http\Requests\{{modelName}}\Update{{modelName}}Request;
use App\{{modelNameSpace}};
use App\Http\Resources\Resource;
use App\Http\Traits\Access;
use App\Http\Traits\HttpResponses;
use App\Http\Traits\Helper;
use Exception;
use Illuminate\Http\JsonResponse;

class {{modelName}}Controller extends Controller
{
    use Access;
    use HttpResponses;
    use Helper;
    /**
     * Display a listing of the resource.
     *
     * @param Request $request
     * @return {{modelName}}Collection
     */
    public function index(Request $request): JsonResponse
    {
        $permission= $this->hasrolePermition($request,'view');      
        if($permission->status=='false'){
           return  $this->error('', Constants::ACCESSERROR, 404, false);
        }
        $limit = $request->has('limit') ? $request->limit : 15;
        $data={{modelName}}::paginate($limit);
        $collectionData= Resource::collection($data)->response()->getData();
        if($collectionData){           
            return $this->success($collectionData, Constants::GETALL, 200,true); 
        }else{             
            return $this->error('',Constants::NODATA, 404,false);    
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param Request $request
     * @return {{modelName}}Resource
     */    
    public function store(Store{{modelName}}Request $request): JsonResponse
    {
        try {  
            $permission= $this->hasrolePermition($request,'add');      
            if($permission->status=='false'){
                return  $this->error('', Constants::ACCESSERROR, 404, false);
            }          
            $data = {{modelName}}::create($request->all());
            return $this->success(
                new Resource($data),
                Constants::STORE,
                201,true
            );
        }catch(Exception $exception) {
            return $this->error('', Constants::FAILSTORE, 404,false);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param {{modelName}} ${{modelNameCamel}}
     * @return {{modelName}}Resource
     */
     public function show({{modelName}} ${{modelNameCamel}},Request $request): JsonResponse
    {      
        try {    
            $permission= $this->hasrolePermition($request,'edit');      
            if($permission->status=='false'){
                return  $this->error('', Constants::ACCESSERROR, 404, false);
            }       
            if(${{modelNameCamel}}){           
                return $this->success(new Resource(${{modelNameCamel}}), Constants::GETALL, 200,true); 
            }else{             
                return $this->error('',Constants::NODATA, 404,false); 
            } 
        } catch (\Throwable $th) {
            return $this->error('',$th, 404,false); 
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param Request $request
     * @param {{modelName}} ${{modelNameCamel}}
     * @return {{modelName}}Resource
     */
    public function update(Update{{modelName}}Request $request, {{modelName}} ${{modelNameCamel}})
    {
        try {  
            $permission= $this->hasrolePermition($request,'edit');      
            if($permission->status=='false'){
                return  $this->error('', Constants::ACCESSERROR, 404, false);
            }         
            ${{modelNameCamel}}->update($request->all());
            return $this->success(new Resource(${{modelNameCamel}}), Constants::UPDATE, 201,true);         
        }catch(Exception $exception) {
            return $this->error('', $exception->getMessage(), 404,false);          
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param {{modelName}} ${{modelNameCamel}}
     * @return JsonResponse
     * @throws Exception
     */   
    public function destroy({{modelName}} ${{modelNameCamel}},Request $request): JsonResponse
    {
        try {
            $permission= $this->hasrolePermition($request,'delete');      
            if($permission->status=='false'){
                return  $this->error('', Constants::ACCESSERROR, 404, false);
            }           
            ${{modelNameCamel}}->delete();           
            return $this->success('', Constants::DESTROY, 200,true);         
        }catch(Exception $exception) {
            return $this->error('', $exception->getMessage(), 404,false);          
        }
    }
}
